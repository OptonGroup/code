// MXCODE
//
// ||\\  //||    CCCCC   OOOO    DDDDD    EEEEEE
// || \\// ||   CC      O    O   D    D   E
// ||  XX  ||   C       O    O   D    D   EEEEEE
// || //\\ ||   CC      O    O   D    D   E
// ||//  \\||    CCCCC   OOOO    DDDDD    EEEEEE
//

#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
#include <cctype>
#include <string>
#define endl '\n'
using namespace std;

vector <vector <int>> g;
vector <vector <int>> used;
int n;
int atary = 0;
vector <vector <int>> moves = { {-1, 0}, {0, -1}, {0, 1}, {1, 0} };

void dfs(int i, int j, int cnt = 0) {
	if (used[i][j] == 1)
		return;
	used[i][j] = 1;
	for (auto move : moves) {
		int i2 = i + move[0], j2 = move[1];
		if (i2 >= 0 && i2 < n && j >= 0 && j < n) {
			if (g[i2][j2] == 0) {
				cnt++;
			}
		}
	}

	for (auto move : moves) {
		int i2 = i + move[0], j2 = move[1];
		if (i2 >= 0 && i2 < n && j >= 0 && j < n) {
			if (used[i2][j2] == 0)
				dfs(i2, j2, cnt);
		}
	}

}

int main() {

	cin >> n;
	g.resize(n);
	used.resize(n, vector<int>(n));
	string s;
	for (int i = 0; i < n; ++i) {
		cin >> s;
		for (int j = 0; j < n; ++j) {
			if (s[j] == '.')
				g[i].push_back(0);
			else if (s[j] == 'W') 
				g[i].push_back(1);
			else
				g[i].push_back(2);
		}
	}

	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			if (g[i][j] == 2)
				dfs(i, j);
		}
	}

	return 0;
}
